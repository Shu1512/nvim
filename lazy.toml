# ------------------------------------
# toml syntax
# ------------------------------------
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'preservim/nerdtree'
hook_add = '''
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists('s:std_in') | NERDTree | endif
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * NERDTree | if argc() > 0 || exists("s:std_in") | wincmd p | endif
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif
autocmd BufWinEnter * if getcmdwintype() == '' | silent NERDTreeMirror | endif
function! s:OpenFileOrExplorer(...)
if a:0 == 0 || a:1 == ''
  NERDTree
elseif filereadable(a:1)
  execute 'edit '.a:1
  return 0
  elseif a:1 =~? '^\(scp\|ftp\)://' " Add other protocols as needed.
  execute 'Vexplore '.a:1
elseif isdirectory(a:1)
  execute 'NERDTree '.a:1
  endif
  return 1
  endfunction
  autocmd StdinReadPre * let s:std_in=1
  autocmd VimEnter * if argc()==1 && !exists('s:std_in') | if <SID>OpenFileOrExplorer(argv()[0]) | wincmd p | enew | wincmd p | endif | endif
  command! -n=? -complete=file -bar Edit :call <SID>OpenFileOrExplorer('<args>')
  cnoreabbrev e Edit
'''

[[plugins]]
repo = 'Shougo/ddc.vim'
on_event = 'InsertEnter'
depends = ['denops.vim']
hook_source = '''
call ddc#custom#patch_global('sources', ['nvim-lsp', 'around', 'vsnip'])
call ddc#custom#patch_global('sourceOptions', {
    \ '_': {
    \ 'matchers': ['matcher_head'],
    \ 'sorters': ['sorter_rank'],
    \ 'converters': ['converter_remove_overlap'],
    \ },
    \ 'around': {'mark': 'A'},
    \ 'nvim-lsp': {
    \ 'mark': 'L',
    \ 'forceCompletionPattern': '\.\w*|:\w*|->\w*',
    \ },
    \ })

call ddc#custom#patch_global('sourceParams', {
    \ 'around': {'maxSize': 500},
    \ })

inoremap <silent><expr> <TAB>
\ ddc#map#pum_visible() ? '<C-n>' :
\ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
\ '<TAB>' : ddc#map#manual_complete()
inoremap <expr><S-TAB>  ddc#map#pum_visible() ? '<C-p>' : '<C-h>'

call ddc#enable()
  '''

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'
on_source = 'ddc.vim'

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
on_event = 'InsertEnter'
depends = ['vim-vsnip-integ', 'friendly-snippets']
hook_add = '''
imap <expr> <C-j> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-j>'
smap <expr> <C-j> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-j>'
imap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
smap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
imap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
smap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
let g:vsnip_filetypes = {}
'''

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'

[[plugins]]
repo = 'rafamadriz/friendly-snippets'

[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_event = 'BufEnter'
hook_source = '''
lua << EOF
local nvim_lsp = require('lspconfig')
local on_attach = function (client, bufnr)
local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

local opts = { noremap=true, silent=true }
buf_set_keymap('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
buf_set_keymap('n', 'K', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
buf_set_keymap('n', 'gs', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
buf_set_keymap('n', 'gx', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
buf_set_keymap('n', 'g[', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
buf_set_keymap('n', 'g]', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
end

local lsp_installer = require("nvim-lsp-installer")
lsp_installer.on_server_ready(function(server)
local opts = {}
opts.on_attach = on_attach
server:setup(opts)
vim.cmd [[ do User LspAttachBuffers ]]
end)
EOF
'''

[[plugins]]
repo ='williamboman/nvim-lsp-installer'
on_source = 'nvim-lspconfig'

[[plugins]]
repo = 'matsui54/denops-signature_help'
on_source = 'ddc.vim'
hook_source = '''
call signature_help#enable()
'''

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
on_source = 'ddc.vim'
hook_source = '''
call popup_preview#enable()
'''

[[plugins]] # text move, duplication
repo = 't9md/vim-textmanip'
on_path = '.*'
hook_add = '''
xmap <Space>d <Plug>(textmanip-duplicate-down)
nmap <Space>d <Plug>(textmanip-duplicate-down)
xmap <Space>D <Plug>(textmanip-duplicate-up)
nmap <Space>D <Plug>(textmanip-duplicate-up)

xmap <C-j> <Plug>(textmanip-move-down)
xmap <C-k> <Plug>(textmanip-move-up)
xmap <C-h> <Plug>(textmanip-move-left)
xmap <C-l> <Plug>(textmanip-move-right)
'''

[[plugins]]
repo = 'tpope/vim-surround'
on_path = '.*'

[[plugins]]
repo = 'junegunn/fzf.vim'
on_path = '.*'
hook_add = '''
nnoremap <silent> <Leader>. :GFiles<CR>
nnoremap <silent> <Leader>, :<C-u>FZFMru<CR>
nnoremap <silent> <Leader>l :<C-u>Lines<CR>
nnoremap <silent> <Leader>b :<C-u>Buffers<CR>
command! FZFMru call fzf#run({
    \ 'source': v:oldfiles,
    \ 'sink': 'e',
    \ 'options': '-m +s --border=none',
    \ 'down':  '20%'})

let g:fzf_layout = {'up':'~90%', 'window': { 'width': 0.8, 'height': 0.8,'yoffset':0.5,'xoffset': 0.5, 'border': 'none' } }

augroup vimrc_fzf
autocmd!
autocmd FileType fzf tnoremap <silent> <buffer> <Esc> <C-g>
autocmd FileType fzf set laststatus=0 noshowmode noruler
\| autocmd BufLeave <buffer> set laststatus=2 noshowmode ruler
augroup END
'''

[[plugins]]
repo = 'cohama/lexima.vim'
on_path = '.*'
hook_source = '''
g:lexima_enable_newline_rules
'''
[[plugins]] # syntax checking
repo = 'w0rp/ale'
on_path = '.*'
hook_add = '''
" ‰øùÂ≠òÊôÇ„ÅÆ„ÅøÂÆüË°å„Åô„Çã
let g:ale_lint_on_text_changed = 0
" Ë°®Á§∫„Å´Èñ¢„Åô„ÇãË®≠ÂÆö
let g:ale_statusline_format = ['‚®â %d', '‚ö† %d', '‚¨• ok']
" let g:ale_sign_error = '‚§´'
" let g:ale_sign_warning = '‚ö†'
let g:ale_sign_error = 'üò°'
let g:ale_sign_warning = 'üò©'
let g:airline#extensions#ale#open_lnum_symbol = '('
let g:airline#extensions#ale#close_lnum_symbol = ')'
let g:ale_echo_msg_format = '[%linter%]%code: %%s'
highlight link ALEErrorSign Tag
highlight link ALEWarningSign StorageClass
" Ctrl + k„ÅßÊ¨°„ÅÆÊåáÊëò„Å∏„ÄÅCtrl + j„ÅßÂâç„ÅÆÊåáÊëò„Å∏ÁßªÂãï
" nmap <silent> <C-k> <Plug>(ale_previous_wrap)
" nmap <silent> <C-j> <Plug>(ale_next_wrap)
let g:ale_linters = {
\   'javascript': ['eslint'],
\   'python'    : ['flake8']
\}
'''

[[plugins]] # status line
repo = 'vim-airline/vim-airline'
on_source = 'ale'
depends = ['vim-airline-themes']

[[plugins]] # airline-theme
repo = 'vim-airline/vim-airline-themes'
hook_add = '''
set laststatus=2
let g:airline_powerline_fonts = 1
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#wordcount#enabled = 0
let g:airline#extensions#default#layout = [['a', 'b', 'c'], ['x', 'y', 'z']]
let g:airline_section_c = '%t'
let g:airline_section_x = '%{&filetype}'
let g:airline_section_z = '%3l:%2v %{airline#extensions#ale#get_warning()} %{airline#extensions#ale#get_error()}'
let g:airline#extensions#default#section_truncate_width = {}
let g:airline#extensions#whitespace#enabled = 1
'''

[[pluginsn]]
repo = 'posva/vim-vue'
on_path = '.vue'
